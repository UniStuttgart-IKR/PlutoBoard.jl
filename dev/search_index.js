var documenterSearchIndex = {"docs":
[{"location":"cells/#Pluto-Cells","page":"Adding Pluto Cells","title":"Pluto Cells","text":"","category":"section"},{"location":"cells/","page":"Adding Pluto Cells","title":"Adding Pluto Cells","text":"You can place Pluto cells everywhere in the HTML document by adding cell-div to the class attribute of a div. PlutoBoard will place the cell with matching cellid inside that div:","category":"page"},{"location":"cells/","page":"Adding Pluto Cells","title":"Adding Pluto Cells","text":"<div class=\"cell-div\" cellid=\"cell_id\" rv=\"some_variable\" />","category":"page"},{"location":"cells/","page":"Adding Pluto Cells","title":"Adding Pluto Cells","text":"rv is optional and used for reactive variables. For further information about reactivity and reactive variables head to reactivity.","category":"page"},{"location":"javascript/","page":"-","title":"-","text":"All JavaScript methods are documented here","category":"page"},{"location":"jsdoc/#JavaScript-API-Reference","page":"JavaScript API Reference","title":"JavaScript API Reference","text":"","category":"section"},{"location":"jsdoc/","page":"JavaScript API Reference","title":"JavaScript API Reference","text":"The complete JavaScript API documentation is generated using JSDoc and integrated below.","category":"page"},{"location":"jsdoc/","page":"JavaScript API Reference","title":"JavaScript API Reference","text":"<style>\n.jsdoc-frame {\n    width: 50vw;\n    min-height: 75vh;\n    border: 1px solid #ddddddc0;\n    border-radius: 4px;\n    background: transparent;\n}\n</style>\n\n<iframe src=\"../../docs/js/index.html\" class=\"jsdoc-frame\" title=\"JavaScript API Documentation\">\n    <p>Your browser does not support iframes. Please <a href=\"js/index.html\">click here to view the JSDoc documentation</a>.</p>\n</iframe>","category":"page"},{"location":"interface/#Interface","page":"Interface","title":"Interface","text":"","category":"section"},{"location":"interface/#JavaScript-interface","page":"Interface","title":"JavaScript interface","text":"","category":"section"},{"location":"interface/","page":"Interface","title":"Interface","text":"These functions can be called in the browser and are written in JavaScript.","category":"page"},{"location":"interface/#PlutoBoard.callJuliaFunction-Tuple{}","page":"Interface","title":"PlutoBoard.callJuliaFunction","text":"async callJuliaFunction(\n\tfunc_name,\n\t{ args = [], kwargs = {}, response_callback = () => { }, internal = false } = {}\n) -> Promise\n\nCalls specified Julia function with args and callback within browser context from JavaScript.\n\nArgs:\n\nfunc_name: String: Function name of the called Julia function\n\nKwargs:\n\nargs: Array: Args for the Julia function\nkwargs: Dict: Kwargs for the Julia function\nresponse_callback: Function: Function that gets called when a new message is being sent from the Julia function\ninternal: Boolean = false: Whether the targeted function is in PlutoBoard package. Only used for internal calls, defaults to false\n\nExample usage:\n\ncallJuliaFunction(\"get_cube\", {\n\targs: [number],\n\tresponse_callback: (\n\t\tr => {\n\t\t\tconst outP = document.getElementById(\"buttonOutput\");\n\t\t\toutP.innerHTML = `Cube of ${number}... ${Math.round(r * 100)}%`;\n\t\t}\n\t)\n\t}).then(\n\t\tr => {\n\t\t\tconst outP = document.getElementById(\"buttonOutput\");\n\t\t\toutP.innerHTML = `The cube of ${number} is ${r}`;\n\t\t}\n\t)\n\n\n\n\n\n","category":"method"},{"location":"interface/#Julia-interface","page":"Interface","title":"Julia interface","text":"","category":"section"},{"location":"interface/#PlutoBoard.initialize-Tuple{String}","page":"Interface","title":"PlutoBoard.initialize","text":"initialize(\n\thtml_path::String,\n\t;\n\thide_notebook::Bool = true,\n\tscripts::Array{String} = [],\n\tlinks::Array{String} = [],\n) -> nothing\n\nInitializes the PlutoBoard module with parameters. scripts and links are urls to scripts and stylesheets.\n\n\n\n\n\n","category":"method"},{"location":"interface/#PlutoBoard.send_to_ws-Tuple{WebSocket, String}","page":"Interface","title":"PlutoBoard.send_to_ws","text":"send_to_ws(\n\tws::WebSocket,\n\tmessage::String\n)\n\nSend a message to a WebSocket as response. This triggers callback in callJuliaFunction.\n\n\n\n\n\n","category":"method"},{"location":"interface/#PlutoBoard.run","page":"Interface","title":"PlutoBoard.run","text":"run(debug::Bool=false)\n\nRuns the Pluto notebook with the PlutoBoard notebook. If debug is true, the notebook will reload when the file changes. Additionally copies the interface.js file to the lib directory of the current directory.\n\n\n\n\n\n","category":"function"},{"location":"vite/#Vite","page":"Using Vite","title":"Vite","text":"","category":"section"},{"location":"vite/","page":"Using Vite","title":"Using Vite","text":"Since building a website with an actual bundler is way more convenient, PlutoBoard.jl works with Vite! Check Vite's guide to learn more about what Vite supports.","category":"page"},{"location":"vite/","page":"Using Vite","title":"Using Vite","text":"Here is a quick overview of official Vite templates.","category":"page"},{"location":"vite/","page":"Using Vite","title":"Using Vite","text":"JavaScript TypeScript\nvanilla vanilla-ts\nvue vue-ts\nreact react-ts\npreact preact-ts\nlit lit-ts\nsvelte svelte-ts\nsolid solid-ts\nqwik qwik-ts","category":"page"},{"location":"vite/#Setting-up-Vite","page":"Using Vite","title":"Setting up Vite","text":"","category":"section"},{"location":"vite/","page":"Using Vite","title":"Using Vite","text":"First, you need to create a vite app in your packages folder (or anywhere else):","category":"page"},{"location":"vite/","page":"Using Vite","title":"Using Vite","text":"npm create vite@latest vite-ts -- --template vanilla-ts","category":"page"},{"location":"vite/","page":"Using Vite","title":"Using Vite","text":"We will use the vanilla typescript template, but you can use whatever you like.","category":"page"},{"location":"vite/","page":"Using Vite","title":"Using Vite","text":"Since the fileserver PlutoBoard serves its files from runs on a different port than Pluto, we need to take this into account when building our app. We can define this in vite.config.js (in our vite project folder, vite-ts/ in this example):","category":"page"},{"location":"vite/","page":"Using Vite","title":"Using Vite","text":"import { defineConfig } from \"vite\"\n\nexport default defineConfig({\n    base: 'http://localhost:8085/',\n});","category":"page"},{"location":"vite/","page":"Using Vite","title":"Using Vite","text":"If we build the project now, we still need to copy files in vite-ts/dist to static for PlutoBoard to load and serve them. We can do this by defining postbuild in vite-ts/package.json:","category":"page"},{"location":"vite/","page":"Using Vite","title":"Using Vite","text":"\"scripts\": {\n    ...,\n    \"postbuild\": \"cp -rf dist/* ../static/\",\n},","category":"page"},{"location":"vite/","page":"Using Vite","title":"Using Vite","text":"This can be replaced by other paths depending where your vite project is.","category":"page"},{"location":"vite/","page":"Using Vite","title":"Using Vite","text":"To build the project, we just need to run npm run build, which will build everything, set correct urls and move files into static/. For testing use npm run dev, but be aware that PlutoBoard interface functions won't be available. Still great for designing though!","category":"page"},{"location":"vite/#Running-PlutoBoard","page":"Using Vite","title":"Running PlutoBoard","text":"","category":"section"},{"location":"vite/","page":"Using Vite","title":"Using Vite","text":"PlutoBoard handles everything, so just run it as usual! And don't restart it when you run npm run build, it reloads automatically when you change files in static/.","category":"page"},{"location":"vite/","page":"Using Vite","title":"Using Vite","text":"Although it could be useful to run it with hide_notebook=true for the first time. If not, you need to change the style of <div id=\"app\"> to use the whole screen.","category":"page"},{"location":"internal/#Internals","page":"Internal","title":"Internals","text":"","category":"section"},{"location":"internal/#Cell-management","page":"Internal","title":"Cell management","text":"","category":"section"},{"location":"internal/#PlutoBoard.add_cell-Tuple{}","page":"Internal","title":"PlutoBoard.add_cell","text":"add_cell(\n\t;\n\tws::WebSocket\n) -> nothing\n\nAdds a cell at the bottom of the notebook\n\n\n\n\n\n","category":"method"},{"location":"internal/#PlutoBoard.remove_cell-Tuple{String}","page":"Internal","title":"PlutoBoard.remove_cell","text":"remove_cell(\n\tuuid::String\n\t;\n\tws::WebSocket\n) -> nothing\n\nRemoves cell with uuid\n\n\n\n\n\n","category":"method"},{"location":"internal/#PlutoBoard.get_cells-Tuple{}","page":"Internal","title":"PlutoBoard.get_cells","text":"get_cells(\n\t;\n\tws::WebSocket\n) -> Array{String}\n\nReturns an array of all cells uuids\n\n\n\n\n\n","category":"method"},{"location":"internal/#PlutoBoard.find_cells_with_variable-Tuple{String}","page":"Internal","title":"PlutoBoard.find_cells_with_variable","text":"find_cells_with_variable(\n    var::String\n) -> Set{String}\n\nFinds all cells in the notebook that contain the given variable and returns their IDs.\n\n\n\n\n\n","category":"method"},{"location":"internal/#JS,-HTML-and-CSS-injections","page":"Internal","title":"JS, HTML and CSS injections","text":"","category":"section"},{"location":"internal/#PlutoBoard.load_scripts_and_links","page":"Internal","title":"PlutoBoard.load_scripts_and_links","text":"load_scripts_and_links() -> HypertextLiteral.Result\n\nReturns a HypertextLiteral.Result object with scritps and links to load defined by the developer in initialize\n\n\n\n\n\n","category":"function"},{"location":"internal/#PlutoBoard.load_js-Tuple{}","page":"Internal","title":"PlutoBoard.load_js","text":"load_js() -> HypertextLiteral.Result\n\nReturns a HypertextLiteral.Result object to load entry js files as modules and css stylesheets.\n\n\n\n\n\n","category":"method"},{"location":"internal/#PlutoBoard.get_css_files-Tuple{}","page":"Internal","title":"PlutoBoard.get_css_files","text":"get_css_files() -> Array{String}\n\nReturns all css files in static/css folder of developer package.\n\n\n\n\n\n","category":"method"},{"location":"internal/#Fileserver","page":"Internal","title":"Fileserver","text":"","category":"section"},{"location":"internal/#PlutoBoard.serve_file-Tuple{HTTP.Messages.Request}","page":"Internal","title":"PlutoBoard.serve_file","text":"serve_file(req::HTTP.Request)\n\nServes the requested file from the SERVE_DIR directory.\n\n\n\n\n\n","category":"method"},{"location":"internal/#PlutoBoard.start_server-Tuple{}","page":"Internal","title":"PlutoBoard.start_server","text":"start_server()\n\nStarts the server on the port specified in the config.toml file.\n\n\n\n\n\n","category":"method"},{"location":"internal/#PlutoBoard.run_fileserver-Tuple{}","page":"Internal","title":"PlutoBoard.run_fileserver","text":"run_fileserver()\n\nStarts the file server with restarting if needed.\n\n\n\n\n\n","category":"method"},{"location":"internal/#PlutoBoard.get_mime_type-Tuple{Any}","page":"Internal","title":"PlutoBoard.get_mime_type","text":"get_mime_type(file)\n\nReturns the MIME type of the file.\n\n\n\n\n\n","category":"method"},{"location":"internal/#PlutoBoard.monitor_folder-Tuple{}","page":"Internal","title":"PlutoBoard.monitor_folder","text":"monitor_folder(; ws)\n\nWatches the folder specified by `SERVE_DIR` for changes. When a file change is detected, sends a notification to the provided WebSocket `ws`.\n\n\n\n\n\n","category":"method"},{"location":"internal/#Other-stuff","page":"Internal","title":"Other stuff","text":"","category":"section"},{"location":"internal/#PlutoBoard.setup-Tuple{}","page":"Internal","title":"PlutoBoard.setup","text":"setup()::nothing\n\nSets up PlutoBoard project by creating a new Julia package and copying necessary files.\n\n\n\n\n\n","category":"method"},{"location":"internal/#PlutoBoard.get_package_name-Tuple{}","page":"Internal","title":"PlutoBoard.get_package_name","text":"get_package_name()::String\n\nReturns the name of the package from the Project.toml file.\n\n\n\n\n\n","category":"method"},{"location":"internal/#PlutoBoard.open_file-Tuple{String}","page":"Internal","title":"PlutoBoard.open_file","text":"open_file(\n\tpath::String\n)::String\n\nOpens a file and returns its content as a string.\n\n\n\n\n\n","category":"method"},{"location":"internal/#PlutoBoard.copy_with_delete-Tuple{String, String}","page":"Internal","title":"PlutoBoard.copy_with_delete","text":"copy_with_delete(\n\tfrom::String,\n\tto::String\n)::nothing\n\nCopies a file from one location to another and deletes the original file. Sets the permissions of the copied file to 666.\n\n\n\n\n\n","category":"method"},{"location":"internal/#PlutoBoard.parse_to_symbol-Tuple{Dict{String, Any}}","page":"Internal","title":"PlutoBoard.parse_to_symbol","text":"parse_to_symbol(\n\td::Dict{String, Any}\n)::Dict{Symbol, Any}\n\nParse a dictionary with string keys to a dictionary with symbol keys.\n\n\n\n\n\n","category":"method"},{"location":"reactivity/#Reactivity","page":"Reactivity","title":"Reactivity","text":"","category":"section"},{"location":"reactivity/","page":"Reactivity","title":"Reactivity","text":"Since Pluto's reactivity system does not work for variables inside a package (e.g. user_package), but we may need to rerun cells based on their variables (e.g. a cell containing a plot that should update when we collect data from the user with HTML elements), PlutoBoard.jl offers functions to achieve this.","category":"page"},{"location":"reactivity/#Updating-all-cells-containing-matching-variables","page":"Reactivity","title":"Updating all cells containing matching variables","text":"","category":"section"},{"location":"reactivity/","page":"Reactivity","title":"Reactivity","text":"await updateCellByVariable(variable);","category":"page"},{"location":"reactivity/","page":"Reactivity","title":"Reactivity","text":"finds all cells containing variable and reruns them.","category":"page"},{"location":"reactivity/","page":"Reactivity","title":"Reactivity","text":"info: Info\n","category":"page"},{"location":"reactivity/","page":"Reactivity","title":"Reactivity","text":"Note that some_var is not the same as user_package.some_var, so make sure to use variable=\"user_package.some_var\" if you want to rerun cells that use user_package.some_var.","category":"page"},{"location":"reactivity/#Updating-all-cells-with-certain-attribute","page":"Reactivity","title":"Updating all cells with certain attribute","text":"","category":"section"},{"location":"reactivity/","page":"Reactivity","title":"Reactivity","text":"await updateCellByReactiveVariableAttribute(reactiveVariable);","category":"page"},{"location":"reactivity/","page":"Reactivity","title":"Reactivity","text":"finds all <div> elements with the class cell-div and attribute rv=reactiveVariable and reruns them.","category":"page"},{"location":"reactivity/","page":"Reactivity","title":"Reactivity","text":"updateCellByReactiveVariableAttribute(\"some_number\") would rerun following <div>:","category":"page"},{"location":"reactivity/","page":"Reactivity","title":"Reactivity","text":"<div class=\"cell-div\" cellid=\"...\" rv=\"some_number\" />","category":"page"},{"location":"reactivity/","page":"Reactivity","title":"Reactivity","text":"But won't rerun not exact matches:","category":"page"},{"location":"reactivity/","page":"Reactivity","title":"Reactivity","text":"<div class=\"cell-div\" cellid=\"...\" rv=\"some_number_2\" />","category":"page"},{"location":"reactivity/","page":"Reactivity","title":"Reactivity","text":"The rv attribute is not limited to one Reactive variable, it can also have multiple, like rv=\"some_number some_number_1 some_number_2\" seperated with a space.","category":"page"},{"location":"plugins/#Plugins","page":"Plugins","title":"Plugins","text":"","category":"section"},{"location":"plugins/#Create-a-Plugin","page":"Plugins","title":"Create a Plugin","text":"","category":"section"},{"location":"plugins/","page":"Plugins","title":"Plugins","text":"Plugins are Julia packages, so it's straight forward:","category":"page"},{"location":"plugins/","page":"Plugins","title":"Plugins","text":"] generate MyPlugin","category":"page"},{"location":"plugins/","page":"Plugins","title":"Plugins","text":"They need to have a dictionary containing its config:","category":"page"},{"location":"plugins/","page":"Plugins","title":"Plugins","text":"const config = Dict(\n    \"name\" => \"MyPlugin\",\n    \"js_path\" => joinpath(\"static\", \"main.js\")\n)","category":"page"},{"location":"plugins/","page":"Plugins","title":"Plugins","text":"name is your Plugins name.\njs_path points to the JS file that should get loaded from PlutoBoard. Adding more JS files can be done by just importing them in the main JS file.","category":"page"},{"location":"plugins/#Loading-a-plugin","page":"Plugins","title":"Loading a plugin","text":"","category":"section"},{"location":"plugins/","page":"Plugins","title":"Plugins","text":"Now, to load the Plugin, it needs to be imported in the developer package, preferably in Main.jl:","category":"page"},{"location":"plugins/","page":"Plugins","title":"Plugins","text":"using MyPlugin\n\nPlutoBoard.load_plugin(MyPlugin)","category":"page"},{"location":"plugins/","page":"Plugins","title":"Plugins","text":"Now, the Plugin gets loaded at the start of the notebook.","category":"page"},{"location":"plugins/","page":"Plugins","title":"Plugins","text":"Using Plugins, it's possible to easily share functionalities bundled together instead of sending several code snippets. Development only functionalities, like a small GUI for testing the notebook could also be bundled into a plugin to remove it easily in production.","category":"page"},{"location":"plugins/#Internal-functions","page":"Plugins","title":"Internal functions","text":"","category":"section"},{"location":"plugins/#PlutoBoard.load_plugin-Tuple{Any}","page":"Plugins","title":"PlutoBoard.load_plugin","text":"load_plugin(package::Module) -> nothing\n\nLoad the plugins JavaScript file if it exists and has not been loaded yet.\n\n\n\n\n\n","category":"method"},{"location":"","page":"Getting started","title":"Getting started","text":"","category":"page"},{"location":"#Starting-a-new-project","page":"Getting started","title":"Starting a new project","text":"","category":"section"},{"location":"#Setup","page":"Getting started","title":"Setup","text":"","category":"section"},{"location":"","page":"Getting started","title":"Getting started","text":"Generate your package","category":"page"},{"location":"","page":"Getting started","title":"Getting started","text":"$> julia -e 'using Pkg; Pkg.generate(\"YOUR_PACKAGE_NAME\")' && cd YOUR_PACKAGE_NAME","category":"page"},{"location":"","page":"Getting started","title":"Getting started","text":"Add PlutoBoard and set it up","category":"page"},{"location":"","page":"Getting started","title":"Getting started","text":"YOUR_PACKAGE_NAME$> julia --project -e 'using Pkg; Pkg.add(url=\"https://github.com/UniStuttgart-IKR/PlutoBoard.jl\"); using PlutoBoard; PlutoBoard.setup()' ","category":"page"},{"location":"","page":"Getting started","title":"Getting started","text":"Run the notebook","category":"page"},{"location":"","page":"Getting started","title":"Getting started","text":"YOUR_PACKAGE_NAME$> julia --project -e 'using PlutoBoard; PlutoBoard.run(debug=True)'","category":"page"},{"location":"#Write-your-own-code","page":"Getting started","title":"Write your own code","text":"","category":"section"},{"location":"","page":"Getting started","title":"Getting started","text":"main() in src/Main.jl gets called in the beginning, use this as Julia entry point if you need it.","category":"page"},{"location":"","page":"Getting started","title":"Getting started","text":"There is a simple example in src/PlutoBoard.jl, static/index.html and static/javascript/main.js about calling a Julia function from JS with callbacks.","category":"page"},{"location":"#Calling-of-a-Julia-function-within-HTML-using-a-button-and-an-input","page":"Getting started","title":"Calling of a Julia function within HTML using a button and an input","text":"","category":"section"},{"location":"","page":"Getting started","title":"Getting started","text":"First, lets write a simple Julia function in src/Functions.jl.","category":"page"},{"location":"","page":"Getting started","title":"Getting started","text":"info: Info\nThe file name can be arbitrarly chosen, just make sure to include it in src/PlutoBoard.jl","category":"page"},{"location":"","page":"Getting started","title":"Getting started","text":"function get_cube(num; ws)\n    # iterate 50 times\n\tfor i in 1:50\n        # send each i to the frontend\n\t\tPlutoBoard.send_to_ws(ws, i/50)\n        # sleep a little bit so we have time to see it\n\t\tsleep(0.05)\n\tend\n    # finally return the cube of `num`\n\treturn num^3\nend","category":"page"},{"location":"","page":"Getting started","title":"Getting started","text":"Now we create an input with id=buttonInput for our number in static/index.html","category":"page"},{"location":"","page":"Getting started","title":"Getting started","text":"<input type=\"text\" id=\"buttonInput\" placeholder=\"Input number\">","category":"page"},{"location":"","page":"Getting started","title":"Getting started","text":"as well as a button","category":"page"},{"location":"","page":"Getting started","title":"Getting started","text":"<button class=\"btn btn-light\" id=\"calculateButton\">Calculate</button>","category":"page"},{"location":"","page":"Getting started","title":"Getting started","text":"and a div to show our output","category":"page"},{"location":"","page":"Getting started","title":"Getting started","text":"<div class=\"text-white\" id=\"buttonOutput\">Output: </div>","category":"page"},{"location":"","page":"Getting started","title":"Getting started","text":"Now we need to define a function that does something when we click the button. We do this in static/javascript/main.js","category":"page"},{"location":"","page":"Getting started","title":"Getting started","text":"//Import callJuliaFunction. Internal JS files are on /internal/static/javascript\nimport { callJuliaFunction } from \"/internal/static/javascript/interface.js\";\n\nfunction calculateVeryHardStuff() {\n    // get our input\n    const input = document.getElementById(\"buttonInput\");\n    // get the value of input \n    const number = parseInt(input.value);\n\n    // call our previously defined Julia function with arguments and callback\n    callJuliaFunction(\n        // \"get_cube\" is the function we want to call\n        \"get_cube\", {\n        // `get_cube` takes one argument, in this case we pass `number`\n        args: [number],\n        // also pass a callback when we get a response (remember, we are sending the progress of the for loop, i/50)\n        response_callback: (\n            // define the function\n            r => {\n                // get output div\n                const outputP = document.getElementById(\"buttonOutput\");\n                // set innerHTML of output div to show the progress\n                outputP.innerHTML = `${Math.round(r * 100)}%...`;\n            }\n        )\n    })\n    // after getting the return value we want to show it in the output div\n    .then(\n        r => {\n            const outputP = document.getElementById(\"buttonOutput\");\n            outputP.innerHTML = `Cube of ${number} is ${r}`;\n        }\n    )\n}\n\n//add our function as click event to the button\ndocument.getElementById(\"calculateButton\").addEventListener(\"click\", calculateVeryHardStuff);","category":"page"},{"location":"","page":"Getting started","title":"Getting started","text":"info: Info\nUsing await Syntax also works:let value = await callJuliaFunction(\"get_cube\", {args: [10]});\nconsole.log(value);> 1000","category":"page"},{"location":"","page":"Getting started","title":"Getting started","text":"To load the script, we just need to add it to the static/index.html file:","category":"page"},{"location":"","page":"Getting started","title":"Getting started","text":"<html>\n<head>\n  <title>PlutoBoard.jl</title>\n  <script\n          src=\"http://localhost:8085/javascript/main.js\"\n          type=\"module\"\n  ></script>\n</head>\n...\n</html>","category":"page"},{"location":"","page":"Getting started","title":"Getting started","text":"info: Info\nIf you intend to run the fileserver on another port, you need to change the URL accordingly.","category":"page"},{"location":"","page":"Getting started","title":"Getting started","text":"info: Info\nIf you run PlutoBoard while editing a static file, like index.html, the notebook auto reloads!","category":"page"},{"location":"","page":"Getting started","title":"Getting started","text":"And that's it, we have created a simple application using HTML and JavaScript as input and Julia for calculating!","category":"page"},{"location":"","page":"Getting started","title":"Getting started","text":"Importing other JS files is easily done using ES6 Modules:","category":"page"},{"location":"","page":"Getting started","title":"Getting started","text":"//imports function from static/javascript/folder/file.js\nimport { function } from \"./folder/file.js\";","category":"page"},{"location":"","page":"Getting started","title":"Getting started","text":"info: Info\nDon't forget to export functions you want to import elsewhere.","category":"page"}]
}
